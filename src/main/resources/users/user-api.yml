openapi: 3.0.2
info:
  title: UsersDEMO
  version: 2.0.0


paths:
  /users:
    get:
      parameters:
        - in: query
          name: search
          required: false
          schema:
            type: string
          description: Filtering by user's firstName
          example: /users?firstName=Ivan
        - in: query
          name: page
          required: false
          schema:
            type: integer
          description: Pagination parametr, you can choose a page, that will be returned
          example: /users?page=2
        - in: query
          name: size
          schema:
            type: integer
          description: Pagination parametr, you can choose number of returning records on page
          example: /users?per_page=10

      description: Gets all users
      responses:
        '200':
          description: Geting an array of users was successfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'

              example:
                - id: 1
                  firstName: Ivan
                  lastName: Ivanov
                  eMail: ivanov@gmail.com
                - id: 2
                  firstName: Alexander
                  lastName: Alexandrov
                  eMail: alexandrov@yandex.ru
                - id: 3
                  firstName: Maria
                  lastName: Sergeeva
                  eMail: sergeeva@mail.ru.

    post:
      description: Add a new user
      requestBody:
        description: JSON that describes a user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullUserDto'
      responses:
        '200':
          description: A user object with auto-generated id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullUserDto'


  /user/{id}:
    parameters:
      - name: id
        in: path
        description: User Id
        required: true
        schema:
          type: integer
          minimum: 1
          example:
            value: 1
            summary: The lowest limit of path(user_id)
    get:
      description: Get one user by id
      responses:
        '200':
          description: Getting a user was successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullUserDto'


    put:
      description: Update user by id
      requestBody:
        description: JSON that describes updated user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FullUserDto'

      responses:
        '200':
          description: User was updated successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FullUserDto'

    delete:
      description: Delete user by id
      responses:
        '204':
          description: Deleted





components:
  schemas:
    UserListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserShortDto'
        pageable:
          $ref: '../pageable/pageable.yml#/components/schemas/Pageable'
        total_pages:
          type: integer
        total_elements:
          type: integer
        last:
          type: boolean
          first:
            type: boolean
          size:
            type: integer
          number_of_elements:
            type: integer
          number:
            type: integer
          sort:
            $ref: '../pageable/pageable.yml#/components/schemas/Sort'
          empty:
            type: boolean

    UserDto:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          format: int64
          example: 1
          description: User's id

        firstName:
          type: string
          minLength: 2
          maxLength: 20
          example: Ivan
          description: User's first name


        lastName:
          type: string
          minLength: 2
          maxLength: 20
          example: Ivanov
          description: User's last name

        userInfo:
          type: string
          maxLength: 200
          example: 20 y.o, Kirov region, Yurya village
          description: Additional information about user(age, birthplace e.t.c)

        userEmail:
          type: string
          minLength: 5
          maxLength: 30
          example: ivanov@gmail.com
          description: User's eMail address

        vacations:
          type: array
          items:
            $ref: '#/components/schemas/UserVacationDto'
      required: [ id, firstName, lastName ]


    UserShortDto:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          format: int64
          example: 1
          description: User's id

        firstName:
          type: string
          minLength: 2
          maxLength: 20
          example: Ivan
          description: User's first name


        lastName:
          type: string
          minLength: 2
          maxLength: 20
          example: Ivanov
          description: User's last name


        userEmail:
          type: string
          minLength: 5
          maxLength: 30
          example: ivanov@gmail.com
          description: User's eMail address
      required: [ id, firstName, lastName ]

    UserVacationDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        someTextField:
          type: string
        dateFrom:
          type: string
          format: date
          description: Starting date
        dateTo:
          type: string
          format: date
          description: Finishing date





